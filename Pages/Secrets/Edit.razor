@page "/secrets/edit/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using web
@inject keyvault.web.services.SecretService _secretService;
@inject NavigationManager NavManager

@attribute [Authorize]

<h2>Edit</h2>

@if (secretModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
   <EditForm Model=@secretModel OnValidSubmit=@FormSubmitted >
        <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="value">Secret</label>
                    <InputText @bind-Value=secretModel.value class="form-control" id="secret" />
                    <ValidationMessage For=@(() => secretModel.value) />
                </div>
        <input type="submit" class="btn btn-primary" value="Save" />
    </EditForm>
            <button @onclick="() => Reveal(secretModel)">X      
            Reveal
        </button>
}
@code {
    [Parameter]
    public string id { get; set; }
    private SecretDetailsViewModel secretModel;

    protected override async Task OnInitializedAsync()
    {
        if( id == null)
        {
            NavManager.NavigateTo("/secrets");
        }
    
        try 
        {
            secretModel = await _secretService.Get(id);
        }
        catch(AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch(Exception e)
        {
            throw e;
        }
    }
    
    async void Reveal(SecretDetailsViewModel secret)
    {
        secret.value = (await _secretService.Reveal(secret.name)).value;
        secret.Reveal();
        this.StateHasChanged();
    }

    async void FormSubmitted(EditContext editContext)
	{
		bool formIsValid = editContext.Validate();
        if(formIsValid)
        {
            await _secretService.Edit(secretModel.name, secretModel.value);
        }
	}

}