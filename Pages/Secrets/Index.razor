@page "/secrets"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using web
@inject keyvault.web.services.SecretService _secretService;

@attribute [Authorize]

<h1>Secrets</h1>
@if (SecretList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Secret Name</th>
                <th>Id</th>
                <th>Updated On</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var SecretObject in SecretList)
            {
                <tr>
                    <td>@SecretObject.name</td>
                    <td>
                        @SecretObject.value
                        <button @onclick="() => Reveal(SecretObject)">X</button>                
                    </td>
                    <td>@SecretObject.id</td>
                    <td>@SecretObject.updatedOn</td>
                    <td><a href="/secrets/details/@SecretObject.name">View</a></td>
                    <td><a href="/secrets/edit/@SecretObject.name">Edit</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<SecretIndexViewModel> SecretList;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            SecretList = await _secretService.GetAll();
        }
        catch(AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch(Exception e)
        {
            throw e;
        }

    }

    async void Reveal(SecretIndexViewModel secret)
    {
        SecretList.Where(a => a.name != secret.name && a.Revealed == true).ToList().ForEach(b => b.Reveal());
        if(secret.Revealed == false)
        {
            secret.value = (await _secretService.Reveal(secret.name)).value;
        }
        secret.Reveal();
        this.StateHasChanged();
    }

}
